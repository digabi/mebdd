<head>
<!--
	MEBDD
	
	Copyright 2014 Matti Lattu and Matriculation Examination Board of Finland
	
	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
-->
<title>MEB DD 1.3i</title>
<HTA:APPLICATION 
     APPLICATIONNAME="MEB DD"
     SCROLL="yes"
     SINGLEINSTANCE="yes"
	 SYSMENU="no"
     WINDOWSTATE="maximize"
	 ICON="digabi_kuukkeli.ico"
>
	<style type="text/css">
		p { font-family: Arial; font-size: 12pt; }
		h1 { font-family: Arial; font-size: 16pt; }
		ul { font-family: Arial; font-size: 12pt; }
		.radio_disk_normal { font-family: Courier; color: black; }
		.radio_disk_warning { font-family: Courier; color: red; }
		.file_path { font-family: Courier; }
		.header { font-family: Arial; font-size: 130%; color: white; }
		.cellIcon { vertical-align: top; width: 100px; }
		.cellText { vertical-align: top; }
		
		.imageTableNormal { font-family: Arial; font-size: 12pt; background-color: white; }
		.imageTableSelected { font-family: Arial; font-size: 12pt; background-color: grey; }
		.updateTableNormal { font-family: Arial; font-size: 12pt; background-color: white; }
		
		.progressLayer { position: absolute; width: 200px; height: 200px; z-index: 2; left: 200px; top: 200px; margin-left: auto; margin-right: auto; background-color: #ffffff; border-style: solid; border-color: black; font-family: Arial; padding: 20px; }
		.closeButtonLayer { float: right; font-family: Arial; color: red; }
		.languageSelectionLayer { float: right; font-family: Arial; color: red; }
	</style>
</head>

<script language="VBScript" src="mebdd_windows.vbs"></script>
<script language="VBScript" src="mebdd_backend.vbs"></script>
<script language="VBScript" src="vbgettext.vbs"></script>

<script language="VBScript">
	Option Explicit
	
	Const REG_INSTALL_PATH = "SOFTWARE\MEB Finland\mebdd"
	Const REG_INSTALL_KEY = "path_mebdd"
	Const REG_HKLM_PATH = "SOFTWARE\MEB Finland\mebdd"
	Const REG_HKCU_PATH = "Software\MEB Finland\mebdd"
	Const REG_LAST_TAG_KEY = "LastTag"
	Const REG_LAST_LANGUAGE_KEY = "LastLanguage"
	Const LOCALDATA_PATH = "MEB Finland\mebdd"
	Const IMAGE_SOURCE_LEGEND = 0
	Const IMAGE_SOURCE_DESCRIPTION = 1
	Const IMAGE_SOURCE_URL_IMAGE = 2
	Const IMAGE_SOURCE_URL_MD5 = 3
	Const IMAGE_SOURCE_LOCAL_PATH = 4
	Const IMAGE_SOURCE_REG_PATH = 5
	Const IMAGE_SOURCE_MD5_REMOTE_REG_KEY = 6
	Const IMAGE_SOURCE_MD5_LOCAL_REG_KEY = 7
	CONST IMAGE_SOURCE_VERSION_KEY = 8
	
	' Set image update method. Possible values are:
	' "individual" - images can be updated individualy
	' "group" - if any of the images are updated all images must be updated
	' This can be set with mebdd.ini, *System / ImageUpdateMethod
	Dim IMAGE_UPDATE_METHOD
	IMAGE_UPDATE_METHOD = "group"
	
	' Image version URL
	' This can be set with mebdd.ini, *System / ImageVersionURL
	Dim IMAGE_VERSION_URL
	
	' NOTE! NOTE! We have to give the FULL PATH for these command-line tools.
	' Please make sure you change these in case you relocate the utilities.
	Dim BIN_CURL, BIN_MEBDD_WORKER, BIN_MEBMD5, BIN_UNZIP
	
	BIN_CURL = Win_GetMEBDDInstallationPath() & "\curl.exe"
	BIN_MEBDD_WORKER = Win_GetMEBDDInstallationPath() & "\mebdd_worker.exe"
	BIN_MEBMD5 = Win_GetMEBDDInstallationPath() & "\mebmd5.exe"
	BIN_UNZIP = Win_GetMEBDDInstallationPath() & "\unzip.exe"
	
	Dim IMAGE_SOURCE, IMAGE_SOURCE_PATH
	Set IMAGE_SOURCE = CreateObject("Scripting.Dictionary")
	IMAGE_SOURCE_PATH = Win_GetMEBDDInstallationPath() & "\mebdd.ini"
	SetImageSources
	
	' Currently selected image tag
	Dim strCurrentImageTag
	strCurrentImageTag = ""
	
	' Currently present remote version number (c.f. GetRemoteVersions)
	Dim strCurrentRemoteVersion
	strCurrentRemoteVersion = ""
	
	' Data for language files
	Dim LANGUAGES
	Set LANGUAGES = CreateObject("Scripting.Dictionary")
	LANGUAGES.Add "suomi", Array("fi-FI.po", True)
	LANGUAGES.Add "svenska", Array("fi-SV.po", False)
	LANGUAGES.Add "in English", Array("-", False)

	Dim strCurrentLanguageName
	strCurrentLanguageName = ""
	
	Dim MEBDD_LOG_FILE_PATH
	MEBDD_LOG_FILE_PATH = Win_GetEnvironmentString("TEMP") & "\mebdd.txt"
	
	Dim intCurrentDriveCount

	' Timer objects for delayed onload and scanning USB disks
	Dim objTimerOnload, objTimerScandisks
	

	Sub SetImageSources
		' Remove all existing definitions
		IMAGE_SOURCE.RemoveAll()
		
		Set IMAGE_SOURCE = BEnd_GetImageSources(IMAGE_SOURCE_PATH)
		
		' Do not change these
		'IMAGE_SOURCE.Add "local_image", Array(VBGT_Get("Local file (.iso, .dd)"),"<input type=""button"" id=""buttonOpenFile"" value=""" & VBGT_Get("Select file") & """ onClick=""AskImageFilePath()"">", "", "", "", "", "", "")

	End Sub
	
	' Append given message to MEBDD_LOG_FILE_PATH
	Sub LogMessage (strMessage)
		Dim objFSO, objFile
		
		If IsEmpty(MEBDD_LOG_FILE_PATH) or IsNull(MEBDD_LOG_FILE_PATH) Then
			MsgBox "Error message while initialising: " & strMessage
		Else
			Set objFSO = CreateObject("Scripting.FileSystemObject")
			' Open file for appending (8)
			Set objFile = objFSO.OpenTextFile(MEBDD_LOG_FILE_PATH, 8, True)
			objFile.WriteLine(Date & " " & Time & " : " & strMessage)
			objFile.Close
		End If
	End Sub
	
	' Retrieve remote version and set it to global variable str
	Sub GetRemoteVersions
		Dim strThisTag, strThisDigest, strRemoteVersion, strMD5Url
		
		strRemoteVersion = ""
		If IMAGE_VERSION_URL <> "" Then
			LogMessage "Retrieving remote version from " & IMAGE_VERSION_URL
			strRemoteVersion = BEnd_DownloadVersion(IMAGE_VERSION_URL)
			LogMessage "Got: " & strRemoteVersion
			If strRemoteVersion <> "" Then
				strCurrentRemoteVersion = strRemoteVersion
			End If
		End If
		
		If strCurrentRemoteVersion <> "" Then
			For Each strThisTag in IMAGE_SOURCE
				If IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_URL_MD5) <> "" Then
					strMD5Url = BEnd_FMT(IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_URL_MD5), Array(strCurrentRemoteVersion))
					
					LogMessage("Retrieving MD5 digest from " & strMD5Url)
					strThisDigest = BEnd_DownloadMD5(strMD5Url)
					If strThisDigest = "" Then
						' We have an error
						LogMessage("Error while retrieving MD5 digest from " & strMD5Url & ": " & BEnd_LastError)
					End If
					
					If not Win_WriteRegKeyHKCU(REG_HKCU_PATH, IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_MD5_REMOTE_REG_KEY), strThisDigest) Then
						LogMessage("Failed to write to registry")
					End If
				End If
			Next
		Else
			LogMessage "We could not get remote MD5 digests as the current remote version string is unset"
		End If
	End Sub

	' Populates image update table from IMAGE_SOURCE (hash array) to
	' objImageUpdateTable (HTML object)
	Sub PopulateUpdates
		Dim strTable, strThisRow, strThisTag, strActionCell, arrUpdates(), intUpdates
		Dim strLocalDigest, strRemoteDigest
		
		intUpdates = 0
		
		strTable = "<table>"
		
		For Each strThisTag in IMAGE_SOURCE
			strThisRow = "<tr id=""objUpdateTableRow_" & strThisTag & """ class=""updateTableNormal"">"
			
			strThisRow = strThisRow & "<td>" & IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_LEGEND) & "</td>"
			strThisRow = strThisRow & "<td>" & IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_DESCRIPTION) & "</td>"

			strLocalDigest = Win_ReadRegKeyHKCU(IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_REG_PATH), IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_MD5_LOCAL_REG_KEY))
			strRemoteDigest = Win_ReadRegKeyHKCU(IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_REG_PATH), IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_MD5_REMOTE_REG_KEY))
			
			' Create action button
			strActionCell = ""
			If (not Win_FileExists(IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_LOCAL_PATH))) Then
			
				' The image file does not exist. Offer download.
				
				If IMAGE_UPDATE_METHOD = "individual" Then
					strActionCell = "<td><input type=""button""" & _
						" id=""buttonSelect_" & strThisTag & """" & _
						" onClick=""Download(Array('" & strThisTag & "'))"" value=""" & VBGT_Get("Download") & """></td>"
				ElseIf IMAGE_UPDATE_METHOD = "group" Then
					strActionCell = "<td>" & VBGT_Get("Download required") & "</td>"
					' Add current tag to array of images to update
					ReDim Preserve arrUpdates(intUpdates)
					arrUpdates(intUpdates) = """" & strThisTag & """"
					intUpdates = intUpdates + 1
				End If
				
			ElseIf (IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_MD5_REMOTE_REG_KEY) <> "" and strLocalDigest <> strRemoteDigest) Then
				
				' Remote image has different digest than local. Offer update (download).
				
				If IMAGE_UPDATE_METHOD = "individual" Then
					strActionCell = "<td><input type=""button""" & _
						" id=""buttonSelect_" & strThisTag & """" & _
						" onClick=""Download(Array('" & strThisTag & "'))"" value=""" & VBGT_Get("Update") & """></td>"
				ElseIf IMAGE_UPDATE_METHOD = "group" Then
					strActionCell = "<td>" & VBGT_Get("Update available") & "</td>"
					' Add current tag to array of images to update
					ReDim Preserve arrUpdates(intUpdates)
					arrUpdates(intUpdates) = """" & strThisTag & """"
					intUpdates = intUpdates + 1
				End If
			Else
			
				' We have a good local image file.

				If IMAGE_UPDATE_METHOD = "individual" Then
					strActionCell = "<td>" & VBGT_Get("Up to date") & "</td>"
				ElseIf IMAGE_UPDATE_METHOD = "group" Then
					strActionCell = "<td>" & VBGT_Get("Up to date") & "</td>"
				End If
			End If

			strThisRow = strThisRow & strActionCell & "</tr>"
			
			strTable = strTable & strThisRow
		Next
		
		strTable = strTable & "</table>"
		
		If IMAGE_UPDATE_METHOD = "group" Then
			If intUpdates > 0 Then
				objImageGroupUpdate.InnerHTML = "<p>" & VBGT_Get("There are updates available for the image files.") & _
					"<input type='button' onClick='Download(Array(" & join(arrUpdates, ",") & "))' value='" & _
					VBGT_Get("Download updates") & "'></p>"
			Else
				objImageGroupUpdate.InnerHTML = "<p>" & VBGT_Get("Image files are up to date!") & "</p>"
			End If
		End If
		
		objImageUpdateTable.InnerHTML = strTable
	End Sub
	
	' Populates image selection table from IMAGE_SOURCE (hash array) to
	' objImageSelectionTable (HTML object)
	Sub PopulateImages
		Dim strThisTag, strThisRow, strTable, strActionCell
		
		strTable = "<table>"
		
		For Each strThisTag in IMAGE_SOURCE
			strThisRow = "<tr id=""objImageTableRow_" & strThisTag & """ class=""imageTableNormal"">"
			strThisRow = strThisRow & "<td>" & IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_LEGEND) & "</td>"
			strThisRow = strThisRow & "<td>" & IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_DESCRIPTION) & "</td>"
			
			' Create action button
			strActionCell = ""
			If (not Win_FileExists(IMAGE_SOURCE(strThisTag)(IMAGE_SOURCE_LOCAL_PATH)) and strThisTag <> "local_image") Then
			
				' The image file does not exist.
				strActionCell = "<td>" & VBGT_Get("Missing") & "</td>"
			Else
				strActionCell = "<td><input type=""button""" & _
					" id=""buttonSelect_" & strThisTag & """" & _
					" onClick=""SelectImage('" & strThisTag & "')"" value=""" & VBGT_Get("Select") & """></td>"
			End If
			
			strThisRow = strThisRow & strActionCell & "</tr>"
				
			strTable = strTable & strThisRow
		Next
		
		strTable = strTable & "</table>"

		objImageSelectionTable.InnerHTML = strTable
		
		' Make sure that selected image is selectable
		CheckImagePath
	End Sub
	
	Sub PopulateDrives
		Dim n, arrWriteSelectedDrives, arrRemoveSelectedDrives
		Dim objWMIService, colDiskDrives, objDiskDrive, strWriteRadioHTML, strRemoveRadioHTML, strRadioClass
		Dim strWriteRadioChecked, strRemoveRadioChecked
		
		n = 0
		
		' Check selected drives before scanning new drives
		arrWriteSelectedDrives = GetSelectedDrives("write")
		arrRemoveSelectedDrives = GetSelectedDrives("remove")
		
		' Clear write status icon
		SetWriteStatus(0)
		
		' Reset radio buttons
		objWriteRadioButtonArea.InnerHTML = ""
		objRemoveRadioButtonArea.InnerHTML = ""
		
		Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
		'Set colDiskDrives = objWMIService.ExecQuery ("Select * from Win32_DiskDrive Where MediaType=""Removable Media""")
		Set colDiskDrives = objWMIService.ExecQuery ("Select * from Win32_DiskDrive Where MediaType Like ""Removable Media%""")
		
		strWriteRadioHTML = ""
		strRemoveRadioHTML = ""

		For each objDiskDrive in colDiskDrives
			n = n + 1
			
			' Pre-check drives which were already selected
			strWriteRadioChecked = ""
			strRemoveRadioChecked = ""
			If BEnd_InArray(objDiskDrive.DeviceID, arrWriteSelectedDrives) Then
				strWriteRadioChecked = " checked"
			End If
			If BEnd_InArray(objDiskDrive.DeviceID, arrRemoveSelectedDrives) Then
				strRemoveRadioChecked = " checked"
			End If
			

			' Render suspicious drives with "radio_disk_warning" class instead of "radio_disk_normal"
			strRadioClass = "radio_disk_normal"
			If objDiskDrive.Size > 17179869184 Then
				' This is too big to a USB thumb drive (bigger than 16 Gb)
				strRadioClass = "radio_disk_warning"
			End If
			
			strWriteRadioHTML = strWriteRadioHTML & "<span class=" & strRadioClass & "><input type=checkbox name=formWriteDisk_" & n & " value=" & Chr(34) & objDiskDrive.DeviceID & Chr(34) & " onclick=""CheckSelectedDrive"" " & strWriteRadioChecked & ">" & objDiskDrive.Model & ", " & objDiskDrive.Caption & " (" & BEnd_ConvertSize(objDiskDrive.Size) & ")</span><br/>"
			
			strRemoveRadioHTML = strRemoveRadioHTML & "<span class=" & strRadioClass & "><input type=checkbox name=formRemoveDisk_" & n & " value=" & Chr(34) & objDiskDrive.DeviceID & Chr(34) & " onclick=""CheckSelectedDrive"" " & strRemoveRadioChecked & ">" & objDiskDrive.Model & ", " & objDiskDrive.Caption & " (" & BEnd_ConvertSize(objDiskDrive.Size) & ")</span><br/>"
		Next
		
		intCurrentDriveCount = n
		
		If (n = 0) Then
			objWriteRadioButtonArea.InnerHTML = "<p>" & VBGT_Get("No USB memories found. Please insert one or more USB memories to your computer.") & "</p>"
			objRemoveRadioButtonArea.InnerHTML = "<p>" & VBGT_Get("No USB memories found. Please insert one or more USB memories to your computer.") & "</p>"
			' Disable Select All buttons
			buttonWriteSelectall.disabled = True
			buttonRemoveSelectall.disabled = True
		Else
			objWriteRadioButtonArea.InnerHTML = "<p>" & VBGT_Get("Select USB memories to write:") & "</p>" & strWriteRadioHTML
			objRemoveRadioButtonArea.InnerHTML = "<p>" & VBGT_Get("Select USB memories to undo:") & "</p>" & strRemoveRadioHTML
			' Enable Select All buttons
			buttonWriteSelectall.disabled = False
			buttonRemoveSelectall.disabled = False
		End If
		
		CheckSelectedDrive
		
	End Sub
	
	Sub PopulateLanguages
		Dim strHTML, strLanguage
		
		strHTML = "<select name='objLanguageSelector' onchange='ChangeLanguage()'>"
		
		For Each strLanguage In LANGUAGES
			If (strCurrentLanguageName = "" And LANGUAGES(strLanguage)(1)) Then
				' Use global default language as the default language
				strHTML = strHTML & "<option value='" & strLanguage & "' selected>" & strLanguage & "</option>"
			ElseIf strLanguage = strCurrentLanguageName Then
				' Use user's default language as the default language
				strHTML = strHTML & "<option value='" & strLanguage & "' selected>" & strLanguage & "</option>"
			Else
				strHTML = strHTML & "<option value='" & strLanguage & "'>" & strLanguage & "</option>"
			End If
		Next
		
		strHTML = strHTML & "</select>"
		
		objLanguageSelectionLayer.InnerHTML = strHTML
		
		' Call ChangeLanguage in order to set current default UI language
		ChangeLanguage
	End Sub
	
	Sub ChangeLanguage
		' This is called whenever language selection changes
		' The current code can be read from objLanguageSelector.value
		Dim strPOFile
		
		' Use new PO file
		strPOFile = LANGUAGES(objLanguageSelector.value)(0)
		
		If VBGT_GetPO(strPOFile) Then
			' Store the selected value to user's registry
			If not Win_WriteRegKeyHKCU(REG_HKCU_PATH, REG_LAST_LANGUAGE_KEY, objLanguageSelector.value) Then
				LogMessage "Warning: Failed to store user's default language to registry: " & BEnd_LastError
			End If
		Else
			LogMessage "Warning: Could not initialise language file " & strPOFile
		End If
		
		' Re-initialise image source names
		SetImageSources

		' Write language-specific fields to UI
		buttonWindowClose.Value = VBGT_Get("Close")
		objPhase1Heading.InnerHTML = VBGT_Get("Phase 1: Update image files")
		objPhase2Heading.InnerHTML = VBGT_Get("Phase 2: Select image to write")
		objPhase3Heading.InnerHTML = VBGT_Get("Phase 3: Select USB memories")
		buttonWriteSelectall.Value = VBGT_Get("Select All")
		objPhase4Heading.InnerHTML = VBGT_Get("Phase 4: Write USB memories")
		objPhase4Verify.InnerHTML = VBGT_Get("Verify written USB memories for errors")
		buttonWriteImage.Value = VBGT_Get("Write USB memories")
		objPhase5Heading.InnerHTML = VBGT_Get("Phase 5: Remove image from USB memories")
		buttonRemoveSelectall.Value = VBGT_Get("Select All")
		buttonRemoveImage.Value = VBGT_Get("Remove image")
	End Sub
	
	Sub ButtonsDisable
		' FIXME
		'buttonWriteImage.disabled = True
		'buttonWriteZeroImage.disabled = True
		'buttonPopulateDrives.disabled = True
		'buttonDownload64.disabled = True
		'buttonDownload32.disabled = True
		'buttonOpenFile.disabled = True
		' formImageName.disabled = True
	End Sub
	
	Sub ButtonsEnable
		' FIXME
		'buttonWriteImage.disabled = False
		'buttonWriteZeroImage.disabled = False
		'buttonPopulateDrives.disabled = False
		'buttonDownload64.disabled = False
		'buttonDownload32.disabled = False
		'buttonOpenFile.disabled = False	
		' formImageName.disabled = False
	End Sub
	
	' select all drives from given radio button group
	' strRadioType can be either "write" or "remove"
	Sub SelectAllDrives (strRadioType)
		Dim n, strRadioPrefix, objCheckbox
		
		If strRadioType = "write" Then
			strRadioPrefix = "formWriteDisk_"
		ElseIf strRadioType = "remove" Then
			strRadioPrefix = "formRemoveDisk_"
		Else
			LogMessage("Warning: SelectAllDrives called with unknown radio type: " & strRadioType)
			strRadioPrefix = "formWriteDisk_"
		End If
		
		' Loop through all checkboxes (intCurrentDriveCount is global)
		For n = 1 to intCurrentDriveCount
			document.getElementById(strRadioPrefix & n).checked = True
		Next
	End Sub
	
	' enumerate selected drives from given radio button group
	' strRadioType can be either "write" or "remove"
	Function GetSelectedDrives (strRadioType)
		Dim n, nn, arrSelectedDrives(), strRadioPrefix
		
		If strRadioType = "write" Then
			strRadioPrefix = "formWriteDisk_"
		ElseIf strRadioType = "remove" Then
			strRadioPrefix = "formRemoveDisk_"
		Else
			LogMessage("Warning: GetSelectedDrives called with unknown radio type: " & strRadioType)
			strRadioPrefix = "formWriteDisk_"
		End If
		
		ReDim arrSelectedDrives(0)
		nn=0
		
		' Loop through all checkboxes (intCurrentDriveCount is global)
		For n = 1 to intCurrentDriveCount
			If document.getElementById(strRadioPrefix & n).Checked Then
				nn = nn + 1
				ReDim Preserve arrSelectedDrives(nn)
				arrSelectedDrives(nn) = document.getElementById(strRadioPrefix & n).value
			End If
			SetWriteStatus(0)
		Next
		
		GetSelectedDrives = arrSelectedDrives
	End Function
	
	' Callback function used by download backend to report progress
	Sub DownloadReportProgress (strMessage)
		ProgressEnable(strMessage)
	End Sub
	
	' Downloads given image tags [arrImageTags]. Returns TRUE on success, FALSE on failure.
	' If the IMAGE_SOURCE_URL_IMAGE of the given [strImageTag] is empty, does not download and returns SUCCESS
	' If the IMAGE_SOURCE_URL_MD5 of the given [strImageTag] is empty, does not verify MD5
	Function Download (arrImageTags)
		Dim boolResult, boolDownloadSuccess, boolMoveSuccess, strTempFile, strThisImageTag, strThisImageLegend, _
			strImageUrl, strMD5Url, _
			objDownloadResult, objTempFiles, objTempFiles2, objImageMD5
		Set objTempFiles = CreateObject("Scripting.Dictionary")
		Set objTempFiles2 = CreateObject("Scripting.Dictionary")
		Set objImageMD5 = CreateObject("Scripting.Dictionary")
		
		boolDownloadSuccess = True
		
		' Download all images
		For Each strThisImageTag in arrImageTags
			strThisImageLegend = IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LEGEND)
			strImageUrl = BEnd_FMT(IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_URL_IMAGE), Array(strCurrentRemoteVersion))
			strMD5Url = BEnd_FMT(IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_URL_MD5), Array(strCurrentRemoteVersion))
			Set objDownloadResult = BEnd_DownloadAndVerify(_
				"DownloadReportProgress",_
				strImageUrl,_
				strMD5Url,_
				IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH),_
				strThisImageLegend _
				)
			strTempFile = objDownloadResult("filename")
			
			If strTempFile = "" Then
				' Download or verify failed (exit loop)
				If BEnd_LastError = "CURL_ERROR_23" Then
					AppendWriteStatus(VBGT_Get("The image data download failed: Disk Full"))
					MsgBox BEnd_FMT(VBGT_Get("The image data '%x' download failed: Disk Full"), Array(strThisImageLegend)), 16, VBGT_Get("Error")
				Else
					AppendWriteStatus(VBGT_Get("The image data download failed: " & BEnd_LastError))
					MsgBox BEnd_FMT(VBGT_Get("The image data '%x' download failed."), Array(strThisImageLegend)), 16, VBGT_Get("Error")
				End If
				boolDownloadSuccess = False
				Exit For
			Else
				' Download and verify succeeded
				objTempFiles(strThisImageTag) = strTempFile
				objImageMD5(strThisImageTag) = objDownloadResult("md5")
			End If
		Next
		
		ProgressDisable
		
		' If all downloads were successfully downloaded, move them into place
		If boolDownloadSuccess Then
			boolMoveSuccess = True
			For Each strThisImageTag in arrImageTags
				strThisImageLegend = IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LEGEND)
				objTempFiles2(strThisImageTag) = IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH) & ".bak"
				
				If Win_FileExists(objTempFiles2(strThisImageTag)) and not Win_DeleteFile(objTempFiles2(strThisImageTag)) Then 
					LogMessage "Moving image failed as could not remove old temporary file " & objTempFiles2(strThisImageTag)
					boolMoveSuccess = False
				End If
				
				' Store old image data
				If boolMoveSuccess and Win_FileExists(IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)) Then
					ProgressEnable(BEnd_FMT(VBGT_Get("Storing old image data '%x'..."), Array(strThisImageLegend)))
					If not Win_MoveFile(IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH), objTempFiles2(strThisImageTag)) Then
						LogMessage "Moving old image failed as could not move from " & IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH) & " to " & objTempFiles2(strThisImageTag)
						boolMoveSuccess = False
					Else
						LogMessage "Old image moved from " & IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH) & " to " & objTempFiles2(strThisImageTag)
					End If
				End If
				
				' Move file from temp to final location
				ProgressEnable(BEnd_FMT(VBGT_Get("Moving new image data '%x'..."), Array(strThisImageLegend)))
				If boolMoveSuccess and Win_FileExists(objTempFiles(strThisImageTag)) Then
					If not Win_MoveFile(objTempFiles(strThisImageTag), IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)) Then
						LogMessage "Moving image failed as could not move from " & objTempFiles(strThisImageTag) & " to " & IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)
						boolMoveSuccess = False
					Else
						LogMessage "New image moved from " & objTempFiles(strThisImageTag) & " to " & IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)
					End If
				End If
				
				' Remove temporary directory
				ProgressEnable(BEnd_FMT(VBGT_Get("Removing temporary directory of image '%x'"), Array(strThisImageLegend)))
				If boolMoveSuccess and not Win_DeleteFolder(Win_GetPathname(objTempFiles(strThisImageTag))) Then
					LogMessage "Could not remove temporary directory " & Win_GetPathname(objTempFiles(strThisImageTag))
					boolMoveSuccess = False
				End If
				
				If boolMoveSuccess and Win_FileExists(objTempFiles2(strThisImageTag)) Then
					If not Win_DeleteFile(objTempFiles2(strThisImageTag)) Then
						LogMessage "Could not remove previous image file " & objTempFiles2(strThisImageTag)
					End If
				End If
			Next
			
			If boolMoveSuccess Then
				' All files are now in place
				For Each strThisImageTag in arrImageTags
					If not Win_WriteRegKeyHKCU(IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_REG_PATH), IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_MD5_LOCAL_REG_KEY), objImageMD5(strThisImageTag)) Then
						LogMessage "Failed to store new MD5 sum to registry, last error: " & Win_LastError
					End If
				Next
				ProgressDisable
				MsgBox VBGT_Get("Download complete.")
			Else
				' Failed to move all files. Return previous image files back to their places
				For Each strThisImageTag in arrImageTags
					If Win_FileExists(objTempFiles2(strThisImageTag)) Then
						If not Win_MoveFile(objTempFiles2(strThisImageTag), IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)) Then
							LogMessage "Failed to roll back old image file from " & objTempFiles2(strThisImageTag) & " to " & IMAGE_SOURCE(strThisImageTag)(IMAGE_SOURCE_LOCAL_PATH)
						End If
					End If
				Next
				
				ProgressDisable
				MsgBox VBGT_Get("Failed to move new image file to permanent location. The image download failed."), 16, VBGT_Get("Error")
			End If
		Else
			ProgressDisable
			MsgBox VBGT_Get("The image data download failed."), 16, VBGT_Get("Error")
		End If
		
		PopulateUpdates
		PopulateImages
	End Function
	
    ' At the moment locally selectable images are not used
	Sub AskImageFilePath
		Dim strPath
		
		' Clear write status icon
		SetWriteStatus(0)
	
		strPath = Win_DialogImageFile(VBGT_Get("Select file"), Win_GetLocalImageDirectoryPath(), "*.iso;*.dd")
		
		If strPath <> "" Then
			' Set file path IMAGE_SOURCE properties
			If Win_FileExists(strPath) Then
				' Good, the file even exists
				IMAGE_SOURCE("local_image")(IMAGE_SOURCE_LOCAL_PATH) = strPath
			End If
		End If
	End Sub
	
	' Sets currently selected image as [strImageTag]
	Sub SelectImage (strImageTag)
		Dim objRow, strThisTag
		
		strCurrentImageTag = strImageTag
		
		' Update UI (objImageTable)
		For Each strThisTag in IMAGE_SOURCE
			Set objRow = document.getElementById("objImageTableRow_" & strThisTag)
			If strThisTag = strImageTag Then
				' This is the selected row
				objRow.className = "imageTableSelected"
			Else
				' This is normal row
				objRow.className = "imageTableNormal"
			End If
		Next
		
		' Update image selection status
		CheckImagePath
	End Sub
	
	' Checks that current image tag (strCurrentImageTag) points to an existing file name
	Sub CheckImagePath
		If IMAGE_SOURCE.Exists(strCurrentImageTag) Then
			If (Win_FileExists(IMAGE_SOURCE(strCurrentImageTag)(IMAGE_SOURCE_LOCAL_PATH))) Then
				objPhase2Status.InnerHTML = "<p>Status: There is a selected image.</p>"
			Else
				objPhase2Status.InnerHTML = "<p>Status: There is no selected image.</p>"
				strCurrentImageTag = ""
			End If
		Else
			' strCurrentImageTag does not exist in the IMAGE_SOURCE hash
			strCurrentImageTag = ""
		End If
	End Sub
	
	' Writes strCurrentImageTag image to the selected drives (selected with drive group "write")
	Sub WriteImage
		Dim boolWriteSuccess, strImageFile, arrSelectedDrives, boolVerifyImage, intReturnCode
		
		' Silently exit if strCurrentImageTag has not been set
		If strCurrentImageTag = "" Then
			LogMessage "Cowardly refusing to write the image as current image tag is not set"
			MsgBox VBGT_Get("Please select the image to write"), 16, VBGT_Get("Error")
			Exit Sub
		End If
		
		' Get image path
		strImageFile = IMAGE_SOURCE(strCurrentImageTag)(IMAGE_SOURCE_LOCAL_PATH)
		
		' Get selected drives
		arrSelectedDrives = GetSelectedDrives("write")
		
		If (UBound(arrSelectedDrives) = 0) Then
			MsgBox VBGT_Get("Please select at least one USB memory"), 16, VBGT_Get("Error")
			Exit Sub
		End If

		intReturnCode = MsgBox(VBGT_Get("Warning! This operation removes all files from the selected USB memories. Are you sure you want to continue?"), 1+32+256, VBGT_Get("Confirm"))
		
		If intReturnCode <> 1 Then
			MsgBox VBGT_Get("Operation cancelled"), 64, VBGT_Get("Cancelled")
			Exit Sub
		End If
		
		If checkboxVerify.checked Then
			' Execute mebdd_worker with verify
			boolVerifyImage = True
		Else
			' No verify this time
			boolVerifyImage = False
		End If
		
		' Store last image path
		If not Win_WriteLastImageTag(strCurrentImageTag) Then
			LogMessage("Could not store last selected image: " & Win_LastError)
		End If
		ProgressEnable(VBGT_Get("Writing USB memories..."))

		boolWriteSuccess = BEnd_WriteImage(strImageFile, arrSelectedDrives, boolVerifyImage)
		
		ProgressDisable
		
		If boolWriteSuccess Then
			' Write succeeded
			SetWriteStatus(1)
			MsgBox VBGT_Get("The USB memories have been written successfully"), 64
		Else
			' Write Failed
			SetWriteStatus(-1)

			If BEnd_LastError = "IMAGE_FILE_NOT_FOUND" Then
				MsgBox BEnd_FMT(VBGT_Get("File %x was not found"), Array(strImageFile)), 16, VBGT_Get("Error")
			ElseIf BEnd_LastError = "NO_DRIVES_SELECTED" Then
				MsgBox VBGT_Get("Please select at least one USB memory"), 16, VBGT_Get("Error")
			Else
				MsgBox VBGT_Get("USB memory write failed."), 16, VBGT_Get("Error")
			End If
		End If
	End Sub
	
	' Removes image (i.e. clears partition table & creates a VFAT partition) for selected
	' disks (selected with drive group "remove").
	Sub RemoveImage
		Dim boolWriteSuccess, strImageFile, arrSelectedDrives, boolVerifyImage, intReturnCode
		
		' Get selected drives
		arrSelectedDrives = GetSelectedDrives("remove")
		
		If (UBound(arrSelectedDrives) = 0) Then
			MsgBox VBGT_Get("Please select at least one USB memory"), 16, VBGT_Get("Error")
			Exit Sub
		End If

		intReturnCode = MsgBox(VBGT_Get("Warning! This operation removes all files from the selected USB memories. Are you sure you want to continue?"), 1+32+256, VBGT_Get("Confirm"))
		
		If intReturnCode <> 1 Then
			MsgBox VBGT_Get("Operation cancelled"), 64, VBGT_Get("Cancelled")
			Exit Sub
		End If
		
		ProgressEnable(VBGT_Get("Resetting selected USB memories..."))

		boolWriteSuccess = BEnd_CreateFilesystem(arrSelectedDrives)
		
		ProgressDisable
		
		If boolWriteSuccess Then
			' Write succeeded
			SetWriteStatus(1)
			MsgBox VBGT_Get("The selected USB memories have been reset."), 64
		Else
			' Write Failed
			SetWriteStatus(-1)
			MsgBox VBGT_Get("Failed to reset USB memories."), 16, VBGT_Get("Error")
		End If
	End Sub
	
	' Checks selected drives from both write and remove disk selection groups
	' and sets their UI status
	Sub CheckSelectedDrive
		Dim arrSelectedDrives, objButton
		
		' Do this for WRITE group
		arrSelectedDrives = GetSelectedDrives("write")
		
		If (UBound(arrSelectedDrives) > 0) Then
			objPhase3Status.InnerHTML = "Status: There are selected drives"
		Else
			objPhase3Status.InnerHTML = "Status: There are no selected drives"
		End If
		
		' Do it again for REMOVE group
		arrSelectedDrives = GetSelectedDrives("remove")
		
		If (UBound(arrSelectedDrives) > 0) Then
			objPhase5Status.InnerHTML = "Status: There are selected drives"
		Else
			objPhase5Status.InnerHTML = "Status: There are no selected drives"
		End If
	End Sub
	
	Sub SetWriteStatus (intStatus)
		' Status = 0 : grey logo (neutral)
		' Status < 0 : red logo (failed)
		' Status > 0 : green logo (success)
		
		If intStatus < 0 Then
			objPhase4Status.InnerHTML = "Status: Failed"
		ElseIf intStatus > 0 Then
			objPhase4Status.InnerHTML = "Status: Success"
		Else
			objPhase4Status.InnerHTML = "Status: Neutral"
		End If
	End Sub
	
	Function AppendWriteStatus (strNewMessage)
		objWriteStatus.InnerHTML = Time & " : " & strNewMessage & "<br/>" & objWriteStatus.InnerHTML
		
		' Append to log as well
		LogMessage strNewMessage
		
		' Return always TRUE (Why this is not a sub?)
		AppendWriteStatus = True
	End Function
	
	' Make progress layer visible with text [strMessage]
	Sub ProgressEnable (strMessage) 
		document.getElementById("objProgressLayerText").InnerHTML = strMessage
		document.getElementById("objProgressLayer").style.visibility = "visible"
		AppendWriteStatus(strMessage)
		ButtonsDisable
	End Sub
	
	' Make progress layer invisible
	Sub ProgressDisable
		document.getElementById("objProgressLayer").style.visibility = "hidden"
		ButtonsEnable
	End Sub
	
	Sub Window_onLoad_Delayed
		window.clearInterval(objTimerOnload)
		
		' Enable progress layer
		ProgressEnable(VBGT_Get("Checking latest versions from the server..."))
		
		' Refresh remote versions
		GetRemoteVersions
		
		' Create image selections
		PopulateUpdates
		PopulateImages
		
		' Select stored image tag
		SelectImage(strCurrentImageTag)
		
		' Hide progress layer
		ProgressDisable
		
		' Set timer to rescan disks every now and then
		objTimerScandisks = window.setInterval("PopulateDrives", 5000)
		
	End Sub
	
	' Magically named Window_onLoad is executed when HTA page is loaded
	Sub Window_onLoad
		Dim strLastImageTag, strLastLanguageName
		
		' Get last stored language and set is as current language
		strLastLanguageName = Win_ReadRegKeyHKCU(REG_HKCU_PATH, REG_LAST_LANGUAGE_KEY)
		
		If strLastLanguageName <> "" and LANGUAGES.Exists(strLastLanguageName) Then
			strCurrentLanguageName = strLastLanguageName
		End If
		
		' Set language options (and write langage-specific fields to UI)
		PopulateLanguages
		
		' Execute time-consuming init things after the screen has been drawn
		objTimerOnload = window.setInterval("Window_onLoad_Delayed", 1000)
		
		' Set drive options
		PopulateDrives
		
		' Get last stored image tag and set is as current image
		strLastImageTag = Win_ReadLastImageTag()
		
		If strLastImageTag <> "" and IMAGE_SOURCE.Exists(strLastImageTag) Then
			strCurrentImageTag = strLastImageTag
		End If
		
		' Set write status to neutral
		SetWriteStatus(0)
	End Sub

	' This is executed whenever user clicks the close button on the page
	' The close button of the window is not hidden
	Sub Window_Close
		LogMessage "Killing all subprocesses"
		
		ProgressEnable(VBGT_Get("Exiting, please wait..."))
		
		' Kill subprocesses
		If not Win_KillMySubprocesses() Then
			LogMessage "Failed to kill subprocesses: " & Win_LastError
		End If
		
		' Clear timer intervals
		window.clearInterval(objTimerOnload)
		window.clearInterval(objTimerScandisks)
		
		' Wait for pending jobs to terminate
		BEnd_Wait(3000)
		
		' Log exit
		LogMessage "Exiting by user"
		ProgressDisable
		window.close()
		LogMessage "Exited"
	End Sub
	
</script>

<body>
<span id="objCloseButtonLayer" class="closeButtonLayer"><input type="button" id="buttonWindowClose" value="Close" onclick="Window_Close()"></span>
<span id="objLanguageSelectionLayer" class="languageSelectionLayer"></span>

<!-- Phase 1: Check for updates -->

<h1><span id="objPhase1Heading"></span></h1>

<span class="cellText">
	<span id="objImageUpdateTable"></span>
</span>

<span id="objImageGroupUpdate"></span>

<span id="objPhase1Status"></span>

<!-- Phase 2: Select image -->

<h1><span id="objPhase2Heading"></span></h1>

<span class="cellText">
		<span id="objImageSelectionTable"></span>
</span>

<span id="objPhase2Status"></span>

<!-- Phase 3: Select USB media -->

<h1><span id="objPhase3Heading"></span></h1>

<span class="cellText">
	<span class="radio_disk_normal">
		<span id="objWriteRadioButtonArea"></span>
	</span>
	<input type="button" id="buttonWriteSelectall" value="Select All" onclick="SelectAllDrives('write')">
</span>

<span id="objPhase3Status"></span>

<!-- Phase 4: Start write -->

<h1><span id="objPhase4Heading"></span></h1>

<span class="cellText">
	<p><input type="checkbox" id="checkboxVerify" name="checkboxVerify" checked><span id="objPhase4Verify"></span></p>
	<input type="button" id="buttonWriteImage" value="Write" onclick="WriteImage()">
</span>

<span id="objPhase4Status"></span>

<!-- Phase 5: Clean selected USB memories -->

<h1><span id="objPhase5Heading"></span></h1>

<span class="cellText">
	<span class="radio_disk_normal">
		<span id="objRemoveRadioButtonArea"></span>
	</span>
	<input type="button" id="buttonRemoveSelectall" value="Select All" onclick="SelectAllDrives('remove')"><br/>
	<input type="button" id="buttonRemoveImage" value="Remove" onclick="RemoveImage()">
	<br/><br/>
	<span id="objPhase5Status"></span>
</span>

<h1>Status / Debug</h1>
<span id="objWriteStatus"></span>

<div id="objProgressLayer" class="progressLayer" style="visibility: hidden">
	<img style="margin: 10px" src="working.gif"/><br/>
	<span id="objProgressLayerText"></span>
</div>

<!-- This is needed for file open dialog -->
<OBJECT ID=Dlg CLASSID="CLSID:3050F4E1-98B5-11CF-BB82-00AA00BDCE0B" width=0 height=0> </OBJECT>
</body>
